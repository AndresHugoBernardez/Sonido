//x=[0 1  1 1 0 2 3 1 0 0 0 0 0 0 0 0]
x=[0; 1 ; 1; 1; 0; 2; 3; 1; 0; 0; 0; 0; 0; 0; 0; 0]
// 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16
n=0:15
k=n'

Wo=exp(-%i*2*%pi*k*n/16)

out=Wo*x


///FFT
/// extraído de https://www.researchgate.net/publication/336339137_Transformada_Rapida_de_Fourier
//// adhesión https://es.wikipedia.org/wiki/Transformada_r%C3%A1pida_de_Fourier

W=exp(-2*%i*%pi/4)
WW0=[
1  1   1   1;
1 W^1 W^2 W^3; 
1 W^2 W^0 W^2; 
1 W^3 W^2 W^1]
WW1=[
1 W^0 0 0; 
1 W^2 0 0; 
0   0 1 W^1; 
0   0 1 W^3;]
WW2=[
1 0 W^0 0;
0 1 0   W^0;
1 0 W^2 0;
0 1 0   W^2;]

// se comprueba que WW1*WW2= WW0' (DONDE FILA 1 SE CAMBIA POR LA 2 O EN BINARIO 01<-->10 esto puede ahorrar tiempo de procesamiento al no tener que leer memoria RAM ni cache fuera del procesador)

//Mariposas: "Algoritmo FFT para una secuencia de 8 muestras"(2021),Jaquelin Arzate Gordillo, Youtube, extraído de https://www.youtube.com/watch?v=DAkOXvybQio )


// FFT en Scilab

//  Si N=2 Xout[0]=X[0]+W0*X[1] Xout[0]=X[0]-(-W0*X[1])
//  W0=W^0=1.... to be continued. 

// To do: usar assembler para la FFT. 









